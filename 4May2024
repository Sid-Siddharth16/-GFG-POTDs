
class GfG
{
    // in - LNR
    // post - LRN
    Node solve(int[] in, int is, int ie, int[] post, int ps, int pe, HashMap<Integer,Integer> map){
        if(is>ie  ||  ps>pe){
            return null;
        }
        Node root = new Node(post[pe]);
        int inRoot = map.get(post[pe]);
        int numleft = inRoot - is;
        root.left = solve(in,is,inRoot-1,post,ps,ps+numleft-1,map);
        root.right = solve(in,inRoot+1,ie,post,ps+numleft,pe-1,map);
        return root;
    }
    Node buildTree(int in[], int post[], int n) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            map.put(in[i],i);
        }
        return solve(in,0,n-1,post,0,n-1,map);
    }
}
